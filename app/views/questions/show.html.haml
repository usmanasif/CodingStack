= javascript_include_merged :show

-@current_class = 'question hentry entry post'


-show_close_request_form = !@question.closed && logged_in? && @question.can_be_requested_to_close_by?(current_user)

-if logged_in? && current_user.mod_of?(current_group) && @question.closed
  -show_close_request_form = (@question.close_reason.user_id == current_user.id)

-if show_close_request_form
  -@close_request = @question.close_requests.detect{ |rq| rq.user_id == current_user.id } || CloseRequest.new(:reason => "dupe")

-question_body = find_and_preserve(codingstack_auto_link(markdown(@question.body.present? ? @question.body : @question.title)))

-content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.tags.dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

-content_for :subtabs do
  %h1.navtitle.title.entry-title
    &= @question.title
    -if @question.closed
      =" [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

-source = question_path(@question)
=error_messages_for 'answer'

#question-vote-col
  -if current_user && @question.watch_for?(current_user)
    = link_to image_tag("layer-visible-on.png", 'data-src' => "/images/layer-visible-off.png"), unwatch_question_path(@question), :class => 'question-action', "data-undo" =>  watch_question_path(@question), "data-title" => t(".watch_tooltip"), :title => t(".unwatch_tooltip"), :id => "watch-question"
  -else
    = link_to image_tag("layer-visible-off.png", 'data-src' => "/images/layer-visible-on.png"), watch_question_path(@question), :title => t(".watch_tooltip"), :class => 'question-action', "data-undo" =>  unwatch_question_path(@question), "data-title" => t(".unwatch_tooltip"), :id => "watch-question"

  =vote_box(@question, question_path(@question), @question.closed)

  -if logged_in? && favorite = current_user.favorite(@question)
    = link_to image_tag("favorites.png", 'data-src' => "/images/unfavorites.png"), unfavorite_question_path(@question), :id => "unfavorite-link", :title => t(".unfavorite_tooltip"), :class => 'question-action', "data-undo" =>  favorite_question_path(@question), "data-title" => t(".favorite_tooltip"), 'data-counter' => '.favorites_count'
  -else
    = link_to image_tag("unfavorites.png", 'data-src' => "/images/favorites.png"), favorite_question_path(@question), :id => "favorite-link", :title => t(".favorite_tooltip"), :class => 'question-action', "data-undo" =>  unfavorite_question_path(@question), "data-title" => t(".unfavorite_tooltip"), 'data-counter' => '.favorites_count'
  .favorites_count
    &= @question.favorites_count


#question-body-col.commentable.markdown
  %a{:name => @question.id}
  #body
    -if @question.closed && @question.close_reason
      #close_reason
        = t(".close_reason")
        = t(@question.close_reason.reason, :scope=>"close_requests.form")
        -if !@question.close_reason.comment.empty?
          .comment
            =find_and_preserve(codingstack_auto_link(@question.close_reason.comment))
    .post-text.entry-content
      = question_body
  .tag-list
    -@question.tags.each do |tag|
      %span.tag
        = link_to h(tag), url_for(:controller => "questions", :action => "index", :tags => tag), :rel => "tag"
    - if logged_in? && (current_user.can_modify?(@question) || current_user.can_retag_others_questions_on?(current_group))
      %span.retag
        = link_to t('.retag'), retag_question_path(@question), :id => 'retag'
  .post-info
    .author.user_info.vcard
      .gravatar.logo
        = gravatar(@question.user.email.to_s, :size => 32)
      .user_data
        %span.asked_by
          = t('activerecord.attributes.question.asked_by')
        =render :partial => "users/user_mini", :locals => {:user => @question.user}
        %span.time_ago.published{:title => @question.created_at, :class => "relativetime"}
          = t("time.ago", :time => time_ago_in_words(@question.created_at))
          -if @question.wiki
            .wiki_flag
              wiki
        %span.adr
          -if !@question.user.hide_country
            %span.country-name
              = t("global.from", :site => @question.user.country_name)
              = country_flag(@question.user.country_code, @question.user.country_name)
      .clear
    -if @question.updated_by.present?
      .user_info
        .gravatar.logo
          = gravatar(@question.updated_by.email.to_s, :size => 32)
        .user_data
          %span.asked_by
            = t('activerecord.attributes.question.updated_by')
          =render :partial => "users/user_mini", :locals => {:user => @question.updated_by}
          %span.time_ago.published{:title => @question.updated_at, :class => "relativetime"}
            = t("time.ago", :time => time_ago_in_words(@question.updated_at))
          %span.adr
            -if !@question.updated_by.hide_country
              %span.country-name
                = t("global.from", :site => @question.updated_by.country_name)
                = country_flag(@question.updated_by.country_code, @question.updated_by.country_name)
        .clear
  .controls
    .actions
      -if logged_in?
        - if flag = current_user.has_flagged?(@question)
          %span.flagged= "#{t('.flagged_as')} #{t(flag.type, :scope=>'flags.form')}"
        - else
          =link_to t(".flag"), flag_question_path(@question), :class => "flag-link", :id => "question_flag_link", :rel => 'nofollow'
        -if show_close_request_form
          -close_link_label = current_user.mod_of?(current_group) ?  t(".close") : t(".request_closing")
          =link_to close_link_label, new_question_close_request_path(@question), :id => "request-close-link", :rel => 'nofollow', :title => t('.request_closing_details')

        -if (@question.wiki && current_user.can_edit_wiki_post_on?(@question.group)) || current_user.can_edit_others_posts_on?(@question.group) || current_user.can_modify?(@question)
          = link_to t('scaffold.edit'), edit_question_path(@question), :class => "button"
        -if @question.versions.count > 0
          = link_to t(".history", :default => "history"), history_question_path(@question)
        -if (current_user.can_modify?(@question) || current_user.owner_of?(@question.group))
          = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete
        -if current_user.mod_of?(@question.group)
          = link_to t(".ban"), ban_path(:question_ids => [@question.id]), :class => "button", :confirm => "are you sure?"
    .forms
      -flag = Flag.new
      - flag.flaggeable = @question
      = render :partial => "flags/form", :locals => {:flag => flag, :source => source, :form_id => "question_flag_form" }

      -if !@question.closed && show_close_request_form
        -form_for [@question, @close_request], :html => {:class => "form hide", :id => "request_close_question_form"} do |form|
          -if !@close_request.new?
            =link_to t(".retract_request"), question_close_request_path(:question_id => @question.slug, :id => @close_request.id), :method => :delete, :confirm => "are you sure?"
          = render :partial => "close_requests/form", :object => form
          .group.navform
            = submit_tag t(".request_closing_details"), :class => "button"

  -if logged_in?
    =link_to t("comments.shared.add_comment"), new_question_comment_path(@question), :id => "add_comment_link", :rel => 'nofollow'

  .comments
    -@question.comments.each do |comment|
      = render :partial => "comments/comment", :object => comment, :locals => {:source => source, :mini => true}
  .clear
  .forms
    .comment-form-question
      -form_tag question_comments_path(@question), :class => "form commentForm nestedAnswerForm", :id => "add_comment_form" do
        -@comment = Comment.new
        = render :partial => "comments/form", :locals => {:source => source, :commentable => @question}
        .group.navform
          = submit_tag t("comments.shared.comment_submit"), :class => "button"
          = t("global.or")
          = link_to t('scaffold.cancel'), '', :class => 'cancel_comment'

%a{:name=>"answers"}
#answers
  .secondary-navigation{:class => @active_subtab.to_s}
    .navtitle
      = t(".answers_title", :count => @answers.total_entries + (@question.accepted ? 1 : 0))

    %ul
      %li.newest
        = link_to t("questions.index.newest"), question_path(@question, :sort=>"newest", :anchor => "answers"), :rel => "nofollow"
      %li.votes
        = link_to t("questions.index.votes"), question_path(@question, :sort=>"votes", :anchor => "answers"), :rel => "nofollow"
      %li.oldest
        = link_to t("questions.index.oldest"), question_path(@question, :sort=>"oldest", :anchor => "answers"), :rel => "nofollow"
    .clear
  .block
    -if @question.accepted
      -solution = @question.answer
      =render :partial=> "answer", :locals=> {:question => @question, :answer => solution} unless solution.nil?
    .hentry
      -@answers.each do |answer|
        =render :partial=> "answer", :locals=> {:question => @question, :answer => answer}
    =will_paginate(@answers)

-unless @question.closed
  %a{:name=>"to_answer"}
  -form_for @answer, :url => question_answers_path(@question.id), :html => {:class => "form mainAnswerForm"} do |f|
    = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
    .group.navform
      .right
        = f.label :wiki, "Wiki", :class => "radio"
        = f.check_box :wiki, :class => "checkbox"
      = submit_tag t('answers.form.submit'), :class => "button"
    .clear

-content_for :sidebar do
  -if AppConfig.enable_sharing
    .block
      %h3
        = t(".share")
      .content
        %ul.share
          %li
            = render :partial => "identica"
          -if current_group.domain != AppConfig.domain
            %li
              = render :partial => "codingstack"
          %li
            = render :partial => "twitter"
          %li
            = render :partial => "linkedin"
          %li
            = render :partial => "think"
          %li
            = render :partial => "facebook"
      .clear

  -if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
    -unless @question.flags.count == 0
      .block
        %h3
          = t(:flags, :scope => "activerecord.models")
        .content
          = render :partial => "flags/list", :locals => {:flaggeable => @question}

    -unless @question.close_requests.size == 0
      .block
        %h3
          = t(:prural_name, :scope => "close_requests.model")
        .content
          = render :partial => "close_requests/list", :locals => {:question => @question}

  .block
    %h3
      = t('.tags', :default => [:"layouts.application.tags", :"activerecord.attributes.user.tags", "tags"])
    = render :partial => "shared/tag_list", :object => @tag_cloud, :locals => { :extra_params => {:controller => "questions", :action => "index"} }
    .clear

  -if @question.badges.size > 0
    .block
      %h3
        = t('badges', :scope => "activerecord.models")
      .content
        %ul.list
          -@question.badges.each do |badge|
            %li
              = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}

  .block.stats
    -if @question.group_id != current_group.id
      = t(".asked_on")
      &= @question.group.name

    .entry
      .text.asked
        = t('activerecord.attributes.question.created_at')
        .data
          = t("time.ago", :time => time_ago_in_words(@question.created_at))
    .entry
      .text.viewed
        = t('.viewed')
      .data
        = t('number.x_time', :count => number_with_delimiter(@question.views_count))
    .entry
      .text.last_activity
        = t(".last_activity")
      .data.updated{:title => @question.activity_at, :class => "relativetime"}
        = t("time.ago", :time => time_ago_in_words(@question.activity_at))

  -related_questions = Question.related_questions(@question, :language => find_languages)
  -if !related_questions.empty?
    .block
      %h3
        =t(".related_questions")
      .content
        %ul.list
          -related_questions.each do |rq|
            %li
              =link_to h(rq.title), question_path(rq), :title => truncate(strip_tags(rq.body), :length => 200)
